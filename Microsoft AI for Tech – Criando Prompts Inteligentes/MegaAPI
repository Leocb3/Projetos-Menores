<p align="center"><img src="https://vignette.wikia.nocookie.net/megaman/images/2/22/Cutman.png"></p>
<h2 align="center"><b>MegaMan API</b></h2>
<p align="center">
<a href="https://dotnet.microsoft.com/" alt="Dotnet"><img src="https://img.shields.io/badge/dotnet-3.1-%235c2d91.svg"></a>
<a href="https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/3.1.8" alt="EF Core"><img src="https://img.shields.io/badge/EntityFrameworkCore-3.1.8-%235c913b.svg"></a>
<a href="https://www.nuget.org/packages/Newtonsoft.Json/12.0.2" alt="Newtonsoft Json"><img src="https://img.shields.io/badge/Newtonsoft.Json-12.0.2-%23ff554d.svg"></a>
</p>
<p align="center">Backend para listar dados dos bosses de MegaMan</p>
<hr>

## Exemplo de Resposta JSON

```json
{
  "Id": 1,
  "Code": "DLN/DRN-003",
  "Name": "Cutman",
  "HP": 150,
  "Picture": "https://vignette.wikia.nocookie.net/megaman/images/2/22/Cutman.png"
}
```

## Endpoints da API

- **GET `api/v1/robots`**: Lista todos os robÃ´s.
- **GET `api/v1/robots/{id}`**: Retorna detalhes de um robÃ´ pelo ID.
- **POST `api/v1/robots`**: Adiciona um novo robÃ´.

## Estrutura do Projeto

```plaintext
.vs
.vscode
bin
Controllers
Database
middlewares
Models
obj
Properties
Services
appsettings.Development.json
appsettings.json  
global.json
MegamanApi.csproj  
MegamanApi.sln
Program.cs
Startup.cs
```

## DependÃªncias

| DependÃªncia | VersÃ£o | DescriÃ§Ã£o |
| ----------- | -------| --------- |
| [Microsoft.EntityFrameworkCore](https://www.nuget.org/packages/Microsoft.EntityFrameworkCore/3.1.8) | 3.1.8 | Framework ORM para .NET Core. |
| [Microsoft.EntityFrameworkCore.Design](https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.Design/3.1.8) | 3.1.8 | Ferramentas de design para Entity Framework Core. |
| [Microsoft.EntityFrameworkCore.SqlServer](https://www.nuget.org/packages/Microsoft.EntityFrameworkCore.SqlServer/3.1.8) | 3.1.8 | Provedor de banco de dados SQL Server para Entity Framework Core. |
| [Newtonsoft.Json](https://www.nuget.org/packages/Newtonsoft.Json/12.0.2) | 12.0.2 | Biblioteca para serializaÃ§Ã£o e desserializaÃ§Ã£o de JSON em .NET. |

## TÃ©cnicas Utilizadas

### **Controllers**
Os controllers sÃ£o responsÃ¡veis por gerenciar os endpoints da API e encaminhar as requisiÃ§Ãµes aos serviÃ§os apropriados.

### **Database**
A pasta Database contÃ©m as migraÃ§Ãµes e o contexto do Entity Framework Core, facilitando a comunicaÃ§Ã£o com o banco de dados.

### **Middlewares**
A pasta middlewares armazena middlewares personalizados que tratam requisiÃ§Ãµes e respostas, adicionando camadas de lÃ³gica adicional.

### **Models**
ContÃ©m classes de modelos de dados que representam as entidades da aplicaÃ§Ã£o.

### **Services**
ServiÃ§os contÃªm a lÃ³gica de negÃ³cio e comunicaÃ§Ã£o com a camada de dados.

## ConfiguraÃ§Ãµes
As configuraÃ§Ãµes do projeto sÃ£o gerenciadas pelos arquivos `appsettings.Development.json` e `appsettings.json`, permitindo a personalizaÃ§Ã£o do ambiente de execuÃ§Ã£o.

## InicializaÃ§Ã£o
Os arquivos `Program.cs` e `Startup.cs` contÃªm a configuraÃ§Ã£o e inicializaÃ§Ã£o da aplicaÃ§Ã£o, incluindo a injeÃ§Ã£o de dependÃªncias e configuraÃ§Ã£o do pipeline de requisiÃ§Ãµes.

```
# Arquitetura
src
    ğŸ“‚|- Controllers
    ğŸ“‚|- Services
    ğŸ“‚|- Database
        ğŸ“‚|- DTOs
        ğŸ“‚|- EntityFramework
        ğŸ“‚|- Repositories
    ğŸ“‚|- Middlewares
    ğŸ“‚|- Models
``` 

Para mais detalhes sobre o projeto, consulte os arquivos e diretÃ³rios acima mencionados.

ğŸ¤“ Leonardo Chung Bezerra -
[GitHub](https://github.com/Leocb3)
